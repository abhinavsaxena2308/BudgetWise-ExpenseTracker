{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the BudgetWise application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        }
      },
      "required": [
        "id",
        "email"
      ]
    },
    "Expense": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Expense",
      "type": "object",
      "description": "Represents a single expense recorded by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the expense."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Expense)"
        },
        "categoryId": {
          "type": "string",
          "description": "Reference to Category. (Relationship: Category 1:N Expense)"
        },
        "amount": {
          "type": "number",
          "description": "The amount of the expense."
        },
        "date": {
          "type": "string",
          "description": "The date of the expense.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "A description of the expense."
        }
      },
      "required": [
        "id",
        "userId",
        "categoryId",
        "amount",
        "date",
        "description"
      ]
    },
    "Budget": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Budget",
      "type": "object",
      "description": "Represents a user's overall budget for a given period.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the budget."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Budget)"
        },
        "name": {
          "type": "string",
          "description": "A descriptive name for the budget (e.g., 'Monthly Budget')."
        },
        "amount": {
          "type": "number",
          "description": "The total budgeted amount."
        },
        "startDate": {
          "type": "string",
          "description": "The start date of the budget period.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "The end date of the budget period.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "name",
        "amount",
        "startDate",
        "endDate"
      ]
    },
    "Category": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Category",
      "type": "object",
      "description": "Represents a category for expenses.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the category."
        },
        "name": {
          "type": "string",
          "description": "The name of the category (e.g., 'Food', 'Rent', 'Transportation')."
        },
        "description": {
          "type": "string",
          "description": "A description of the category."
        }
      },
      "required": [
        "id",
        "name",
        "description"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous",
      "google.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information. Each user document is identified by their unique Firebase Auth ID.",
          "params": [
            {
              "name": "userId",
              "description": "The unique Firebase Auth ID of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/expenses/{expenseId}",
        "definition": {
          "entityName": "Expense",
          "schema": {
            "$ref": "#/backend/entities/Expense"
          },
          "description": "Stores expense records for a specific user.  Authorization is based on the userId in the path.",
          "params": [
            {
              "name": "userId",
              "description": "The unique Firebase Auth ID of the user."
            },
            {
              "name": "expenseId",
              "description": "The unique ID of the expense."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/budgets/{budgetId}",
        "definition": {
          "entityName": "Budget",
          "schema": {
            "$ref": "#/backend/entities/Budget"
          },
          "description": "Stores budget information for a specific user. Authorization is based on the userId in the path.",
          "params": [
            {
              "name": "userId",
              "description": "The unique Firebase Auth ID of the user."
            },
            {
              "name": "budgetId",
              "description": "The unique ID of the budget."
            }
          ]
        }
      },
      {
        "path": "/categories/{categoryId}",
        "definition": {
          "entityName": "Category",
          "schema": {
            "$ref": "#/backend/entities/Category"
          },
          "description": "Stores categories that can be referenced by expenses. This allows for the creation of global/default categories.",
          "params": [
            {
              "name": "categoryId",
              "description": "The unique ID of the category."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure data isolation and security by leveraging path-based ownership for user-specific data. Each user's data (budgets, expenses) resides under their dedicated path (`/users/{userId}`). This approach provides Authorization Independence because access control is directly tied to the user's ID in the path, eliminating the need for `get()` calls to parent documents for authorization. Each collection enforces rules based on `request.auth.uid` which allows us to control access and apply security rules in a simple and effective manner. The use of the path `/categories` allows for categories that can be referenced by the expenses, and can allow for the creation of global/default categories to exist in one place."
  }
}
