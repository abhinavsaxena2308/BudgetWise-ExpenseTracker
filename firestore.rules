/**
 * @fileoverview Firestore Security Rules for BudgetWise application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data (budgets, expenses) stored under the `/users/{userId}` path.
 * Only authenticated users can access the application.
 * Categories are publicly readable but not writable.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, with userId matching the Firebase Auth UID.
 * - /users/{userId}/expenses/{expenseId}: Stores expense records for a specific user.
 * - /users/{userId}/budgets/{budgetId}: Stores budget information for a specific user.
 * - /categories/{categoryId}: Stores global categories.
 *
 * Key Security Decisions:
 * - Authenticated Access: All users must be authenticated to access any data.
 * - User Data Ownership: Users can only access their own data under their /users/{userId} path.
 * - Category Read Access: Categories are publicly readable to allow for global/default categories.
 * - Category Write Restriction: Categories are not writable by clients.
 *
 * Denormalization for Authorization:
 *  - The `userId` is embedded in the paths `/users/{userId}/expenses/{expenseId}` and `/users/{userId}/budgets/{budgetId}`
 *    to avoid the need for `get()` calls to parent documents for authorization.
 *  - Enforce `request.auth.uid` matching `userId` parameter to ensure data consistency.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines the basic access control for the entire database.
     * Only authenticated users can access any data.
     */
    match /{document=**} {
        allow read, write: if isSignedIn();
    }

    /**
     * @description Manages access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with matching userId can create their profile.
     * @deny (create) User attempting to create a profile with a mismatched userId.
     * @allow (get, list) User with matching userId can read their profile.
     * @deny (get, list) User attempting to read another user's profile.
     * @allow (update, delete) User with matching userId can update/delete their profile.
     * @deny (update, delete) User attempting to update/delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to expense records for a specific user.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User with matching userId can create expense records.
     * @deny (create) User attempting to create expense records with a mismatched userId.
     * @allow (get, list) User with matching userId can read their expense records.
     * @deny (get, list) User attempting to read another user's expense records.
     * @allow (update, delete) User with matching userId can update/delete their expense records.
     * @deny (update, delete) User attempting to update/delete another user's expense records.
     * @principle Enforces document ownership for expense records.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to budget information for a specific user.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) User with matching userId can create budget information.
     * @deny (create) User attempting to create budget information with a mismatched userId.
     * @allow (get, list) User with matching userId can read their budget information.
     * @deny (get, list) User attempting to read another user's budget information.
     * @allow (update, delete) User with matching userId can update/delete their budget information.
     * @deny (update, delete) User attempting to update/delete another user's budget information.
     * @principle Enforces document ownership for budget information.
     */
    match /users/{userId}/budgets/{budgetId} {
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to categories. Categories are publicly readable but not writable.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read categories.
     * @deny (create, update, delete) No user can create, update, or delete categories.
     * @principle Allows public read access to categories while restricting write access.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}