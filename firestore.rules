/**
 * @fileoverview Firestore Security Rules for the BudgetWise application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, budgets, and expenses.
 * Users can only access their own data. Categories are publicly readable.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/budgets/{budgetId}: Stores budget data for each user.
 * - /users/{userId}/expenses/{expenseId}: Stores expense data for each user.
 * - /categories/{categoryId}: Stores global category data.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Categories are publicly readable to allow all users to categorize their budgets and expenses consistently.
 * - All write operations on user-owned data require authentication and ownership validation.
 *
 * Denormalization for Authorization:
 * The `userId` is present both in the path and as a field within the Budget and Expense documents. This
 * denormalization enables efficient security rules that avoid costly `get()` operations.
 *
 * Structural Segregation:
 * User-specific data (budgets, expenses) is stored in subcollections under the respective user's document,
 * while public category data is stored in a top-level collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile information, ensuring only the user can read and write their own data.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user_abc' can create their profile. request.auth.uid == 'user_abc'
     * @allow (get) - User with ID 'user_abc' can read their profile. request.auth.uid == 'user_abc'
     * @allow (update) - User with ID 'user_abc' can update their profile. request.auth.uid == 'user_abc'
     * @allow (delete) - User with ID 'user_abc' can delete their profile. request.auth.uid == 'user_abc'
     * @deny (create) - User with ID 'user_xyz' cannot create a profile for user 'user_abc'. request.auth.uid != 'user_abc'
     * @deny (get) - User with ID 'user_xyz' cannot read the profile of user 'user_abc'. request.auth.uid != 'user_abc'
     * @deny (update) - User with ID 'user_xyz' cannot update the profile of user 'user_abc'. request.auth.uid != 'user_abc'
     * @deny (delete) - User with ID 'user_xyz' cannot delete the profile of user 'user_abc'. request.auth.uid != 'user_abc'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Protects budget information, ensuring only the owner user can manage their budget data.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) - User with ID 'user_abc' can create a budget. request.auth.uid == 'user_abc'
     * @allow (get) - User with ID 'user_abc' can read their budget. request.auth.uid == 'user_abc'
     * @allow (update) - User with ID 'user_abc' can update their budget. request.auth.uid == 'user_abc'
     * @allow (delete) - User with ID 'user_abc' can delete their budget. request.auth.uid == 'user_abc'
     * @deny (create) - User with ID 'user_xyz' cannot create a budget for user 'user_abc'. request.auth.uid != 'user_abc'
     * @deny (get) - User with ID 'user_xyz' cannot read the budget of user 'user_abc'. request.auth.uid != 'user_abc'
     * @deny (update) - User with ID 'user_xyz' cannot update the budget of user 'user_abc'. request.auth.uid != 'user_abc'
     * @deny (delete) - User with ID 'user_xyz' cannot delete the budget of user 'user_abc'. request.auth.uid != 'user_abc'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/budgets/{budgetId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Protects expense information, ensuring only the owner user can manage their expense data.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) - User with ID 'user_abc' can create an expense. request.auth.uid == 'user_abc'
     * @allow (get) - User with ID 'user_abc' can read their expense. request.auth.uid == 'user_abc'
     * @allow (update) - User with ID 'user_abc' can update their expense. request.auth.uid == 'user_abc'
     * @allow (delete) - User with ID 'user_abc' can delete their expense. request.auth.uid == 'user_abc'
     * @deny (create) - User with ID 'user_xyz' cannot create an expense for user 'user_abc'. request.auth.uid != 'user_abc'
     * @deny (get) - User with ID 'user_xyz' cannot read the expense of user 'user_abc'. request.auth.uid != 'user_abc'
     * @deny (update) - User with ID 'user_xyz' cannot update the expense of user 'user_abc'. request.auth.uid != 'user_abc'
     * @deny (delete) - User with ID 'user_xyz' cannot delete the expense of user 'user_abc'. request.auth.uid != 'user_abc'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to category information, while writes are disallowed.
     * @path /categories/{categoryId}
     * @allow (get) - Any user can read category data.
     * @allow (list) - Any user can list categories.
     * @deny (create) - No one can create categories through the client.
     * @deny (update) - No one can update categories through the client.
     * @deny (delete) - No one can delete categories through the client.
     * @principle Provides public read access with no write access.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}